/**
  ******************************************************************************
  * @desc    智能成长相册网站lifecat
  * @author  ten
  * @version V2.0.0
  * @date    2018-05
  * @brief   基于MVC的Javaweb网站开发
  ******************************************************************************
  * @访问链接
  *
  * 官网主页 :http://www.lifecat.club
  * 相册主页 :http://111.230.244.153:8080/lifecatweb
  *
  ******************************************************************************
  * @使用技术
  *
  * 前端 :Html CSS JavaScript
  * 前端框架 :bootstrap jQuery
  *
  * 后端 :jsp servlet jdbc
  * 后端框架 :MVC-Model2 sturts设计理念
  *
  * 设计模式 :构建者模式 静态工厂模式 单例模式
  *
  * 单元测试 :Junit4
  *
  * 数据库 :MySql-mariadb
  *
  ******************************************************************************
  * @Web目录
  *
  * web
  * |
  * |-include
  * | |
  * | |-home
  * | | |
  * | | |-homePage.jsp   //用户主页body内容部件
  * | |
  * | |-footer.jsp       //页脚部件
  * | |
  * | |-header.jsp       //页眉部件
  * | |
  * | |-top.jsp          //页面标题栏部件
  * |
  * |-WEB-INF
  * | |
  * | |-imageshow.jsp    //用户图片展示界面
  * | |
  * | |-imageshow2.jsp   //用户分类图片展示界面
  * | |
  * | |-updiary.jsp      //上传日记
  * | |
  * | |-upimage.jsp      //上传图片
  * | |
  * | |-userhome.jsp     //用户主页
  * |
  * |-index.jsp          //登录/注册界面
  *
  ******************************************************************************
  * @Java目录
  *
  * src
  * |
  * |-main
  * | |
  * | |-android       //接收Android端请求, 并返回请求结果
  * | |
  * | |-bean          //对应于数据库表结构, 采用构建者模式生成
  * | |
  * | |-dao           //DAO层, 执行jdbc数据库交互, DAOModel层通过静态工厂获取
  * | |
  * | |-daomodel      //DAOModel层, DAO层的抽象逻辑操作, Model层通过静态工厂获取
  * | |
  * | |-filter        //过滤器, 对所有请求执行Encoding过滤, 对*.do请求执行Form过滤
  * | |
  * | |-form          //表单验证, 对相应表单执行过滤, 确保格式编码等
  * | |
  * | |-python        //通过java call shell方式, 调用本地python脚本, 执行机器学习操作
  * | |
  * | |-service       //Controller层, 通过请求内容, 调用相应Model, 转发到Model并获取返回结果
  * | |
  * | |-servicemodel  //Model层, 执行具体业务逻辑, 并且通过try-catch处理底层抛出异常, 设置内容到Session
  * | |
  * | |-util          //工具类, 多采用单例模式, 包括时间类, 连接类, 图片写入操作, 主机配置等
  * |
  * |-test
  *   |
  *   |-Test          //单元测试
  *
  ******************************************************************************
  * @请求流程分析
  *
  *  用户请求
  *   |          根据result对象, 转发到对应视图, 视图层通过Session访问请求对象
  *   |    +----------------------------------------------------------------+
  *   |    |                                                                |
  *   V    v                                      Form表单验证          控制器: 转发请求
  *  +------+                                         |                 +----------+
  *  | view |                                         v                 |controller|
  *  +------+  'action.do'      映射      web.xml    过滤器               +----------+
  *  web视图层 ----------- > url-pattern --------- > filter --------- > ActionServlet <---+
  *    jsp                                                                  |            |
  *                                                                         | 根据.do     | 返回模型执行结果
  *                                               返回数据库处理结果           | 转发请求     | ModelResult对象
  *                                            +-------------------+        | 调用Model   | 执行相应转发
  *                                            |                   |        |            |
  *             jdbc                           |                   v        v            |
  *     DB < ----------- DAO < ----------- DAOModel < ----------- ServiceModel ----------+
  *     数据库          数据库访问层        处理DAO层具体逻辑            +---------+
  *     |                 |                    ^                   |  model  | ----------> 将获取的结果对象
  *     |                 |                    |                   +---------+             设置到Session
  *     |                 +--------------------+              模型层: 处理具体业务逻辑
  *     v                       返回Bean对象
  *  Bean对象对应数据表
  *
  ******************************************************************************
  */






/**
 +------------------------------------------------------------------------------+
 |                               需求分析                                        |
 +------------------------------------------------------------------------------+
 */
=>数据库范式:
   1NF - First Normal Form 符合1NF的关系中的每个属性都是原子的不可再分。
   2NF - Second Normal Form 满足1NF，数据库表中的每列都完全依赖于主键。
   3NF - Third Normal Form 满足2NF，要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。
   BCNF - Boyce–Codd Normal Form 满足3NF，主属性内部不能部分或传递依赖

=>数据库关系:

    管理员 < ------ > 用户 < ------ > 日记
             1:N      ^      1:N
                      |
                      | 1
                      | :
                      | N
                      |
                      v
                     图片

=>数据库模块:
    管理员模块:
    属性: 管理员ID、用户名、密码...
    唯一表示: ID、用户名
    存储特点: 永久储存

    用户模块:
    属性: 用户ID、用户名、密码、用户资料...
    唯一表示: ID、用户名
    存储特点: 永久储存

    图片模块:
    属性: 用户ID、图片ID、图片日期、图片类别、图片描述...
    唯一表示: 图片ID
    存储特点: 永久储存

    日记模块:
    属性: 用户ID、日记ID、日记日期、日记名称、日记内容...
    唯一表示: 日记ID
    存储特点: 永久储存

=>《Java开发手册》建表规约:
○5.1.1 字段若非负，必须是unsigned
○5.1.1 表达是否概念，必须使用is_xxx方式，数据类型为unsigned tinyint(1是，0否)
○5.1.2 数据库名、表名、字段名必须使用小写
○5.1.3 表名使用单数
○5.1.5 主键索引pk_xxx，唯一索引uk_xxx，普通索引idx_xxx
○5.1.6 小数类型decimal，禁止使用float和double（存在精度损失问题）
○

=>数据库设计: lifecat
    +-------------------+
    | Tables_in_lifecat |
    +-------------------+
    | diary             |
    | upimage           |
    | user              |
    | usermsg           |
    +-------------------+
○管理员表设计: admin
    +----------+-------------+------+-----+---------+-------+
    | Field    | Type        | Null | Key | Default | Extra |
    +----------+-------------+------+-----+---------+-------+
    | id       | int(11)     | NO   | PRI | NULL    |       |
    | name     | varchar(20) | YES  |     | NULL    |       |
    | password | varchar(20) | YES  |     | NULL    |       |
    | level    | varchar(20) | YES  |     | NULL    |       |
    +----------+-------------+------+-----+---------+-------+



user: 用户账号表
usermsg: 用户资料表
diary: 日记表
image: 图片表

user:
id  name  password  level

usermsg:
user_id nickname sex age


diary:
user_id diary_id





+---------------+
| javadoc文档说明|
+---------------+
类命名规范：
    /**
     * NAME: DESCRIPTION
     *
     * 应用模式
     * 功能概述
     * @auther
     */

方法命名规范:
    /**
     * NAME: DESCRIPTION
     *
     * 1.
     * 2.
     * ...
     *
     * @param
     * @throws
     * @return
     */

version1.1
    --添加了logger
    --添加了图片读取
    --修改了HOST接口

version1.2
    --添加了智能分类页面
    --修复了bug

version1.3.1
    --单例模式重构MyDate
    --构建器模式重构Bean
    --重写了User的hashCode计算,Image的hashCode计算
    --覆盖了tostring方法

version1.3.2
    --Image类实现了comparable接口
    --HOST实现了标记接口
    --重构了DAO的SQL查询(单条查询->多条查询)
    //TODO
    --设计方法签名
    --参数检查
    --枚举类改进